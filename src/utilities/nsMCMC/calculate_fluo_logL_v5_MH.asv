function mcmcInfo = calculate_fluo_logL_v5_MH(mcmcInfo)
                      
    
    % extract key hyperparameters
    n_chains = mcmcInfo.n_chains_eff;   
    n_traces = mcmcInfo.n_traces;
    us_factor = mcmcInfo.upsample_factor;
    seq_length = mcmcInfo.seq_length*us_factor;
    coeff_MS2_us = mcmcInfo.MS2_kernel_us; 
    nStepsMax = size(coeff_MS2_us,1);
    
    % calculate relevant indices 
    relevant_indices =  mcmcInfo.relevant_indices(1):mcmcInfo.relevant_indices(1)+nStepsMax-1;%(samp_index:samp_index+nStepsMax-1)';
    comp_filter = relevant_indices<=seq_length;
    comp_indices = relevant_indices(comp_filter);    
    comp_indices_fluo = ceil((comp_indices(1))/us_factor):floor((comp_indices(end))/us_factor); % map to experimental data indices
    coeff_MS2 = coeff_MS2_us(comp_filter,:);
    us_map_filter = ismember((comp_indices-1)/us_factor,comp_indices_fluo);
%     v_curr_long = mcmcInfo.v_curr_long(comp_filter,:,:);
    
    % extract w X n_chains X n_traces piece of fluo array    
    fluo_full_curr = mcmcInfo.sample_fluo_temp(comp_indices-1,:,:);
 
    
    % extract 1 X n_chains X n_traces array of current states
    current_states = mcmcInfo.curr_block;
    prop_states = mcmcInfo.prop_block;
    ns = size(mcmcInfo.curr_block,1);
    
    % get corresponding emission rate array
    v_lin_indices = mcmcInfo.chain_id_ref + 1 + (current_states-1)*n_chains;
    initiation_fragment = mcmcInfo.v_curr(v_lin_indices)/us_factor;
    
    v_lin_indices_prop = mcmcInfo.chain_id_ref + 1 + (prop_states-1)*n_chains;
    initiation_fragment_prop = mcmcInfo.v_curr(v_lin_indices_prop)/us_factor;
        
    % calculate expected contribution of current state to each time step
    if ~mcmcInfo.inferNStepsFlag
        fluo_frag_curr = convn(coeff_MS2(:,1),initiation_fragment,'full');    
        fluo_frag_prop = convn(coeff_MS2(:,1),initiation_fragment_prop,'full');             
    else
        fluo_frag_curr = NaN(size(initiation_fragment_prop,1)+size(coeff_MS2,1)-1,size(initiation_fragment_prop,2),size(initiation_fragment_prop,3));
        fluo_frag_prop = NaN(size(initiation_fragment_prop,1)+size(coeff_MS2,1)-1,size(initiation_fragment_prop,2),size(initiation_fragment_prop,3));
        for n = 1:size(initiation_frag_prop,2)
            fluo_frag_prop(:,n,:) = convn(coeff_MS2(:,n),initiation_fragment_prop(:,n,:),'full');             
            fluo_frag_curr(:,n,:) = convn(coeff_MS2(:,n),initiation_fragment(:,n,:),'full');             
        end    
    end
    fluo_frag_curr = fluo_frag_curr(1:end-us_factor+1,:,:);   
    fluo_frag_prop = fluo_frag_prop(1:end-us_factor+1,:,:);
    
    % extract relevant comparison fragment
    ref_fluo = permute(mcmcInfo.observed_fluo(comp_indices_fluo,:,:),[1 3 2]);
    
    % generate sigma array       
    sigma_ref = repmat(mcmcInfo.sigma_curr',size(ref_fluo,1),1,n_traces);
    
    % now iterate through each possible state and calculate expected
    % change, new predicted fluo, and resulting likelihood
%     logL_fluo = NaN(n_traces,n_chains);
%     new_fluo_array = NaN(size(coeff_MS2,1),n_chains,n_traces,nStates);
    
    % calculate new fluorescence      
    fluo_new = fluo_full_curr + fluo_frag_prop - fluo_frag_curr;
   
    % downsample
    fluo_prop_cp = fluo_new(us_map_filter,:,:);
    fluo_curr_cp = fluo_full_curr(us_map_filter,:,:);
    
    % calculate likelihoods      
    try
        logL_fluo_curr = sum(-0.5*(((ref_fluo-fluo_curr_cp)./sigma_ref).^2 + log(2*pi*sigma_ref.^2)),1);
        logL_fluo_prop = sum(-0.5*(((ref_fluo-fluo_prop_cp)./sigma_ref).^2 + log(2*pi*sigma_ref.^2)),1);
    catch
        error(
    d_logL = logL_fluo_prop-logL_fluo_curr;

    % perform MH move
    mh_factor_array = exp(d_logL);    
    af = mh_factor_array >= rand(1,n_chains,n_traces);
    accept_flags_fluo = repmat(af,length(comp_indices),1,1);
    accept_flags_state = repmat(af,ns,1,1);
    
    % store results    
    fluo_full_curr(accept_flags_fluo) = fluo_new(accept_flags_fluo);
    current_states(accept_flags_state) = prop_states(accept_flags_state);
  
    mcmcInfo.sample_fluo_temp(comp_indices-1,:,:) = fluo_full_curr;
    mcmcInfo.sample_chains_temp(mcmcInfo.relevant_indices,:,:) = current_states;
    
   