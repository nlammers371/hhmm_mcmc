% Script to experiment with non-sequential MCMC sampling for parameter
% inference

clear 
close all force

addpath(genpath('utilities'))

% initialize info structure
mcmcInfo = struct;

%%%%%%%%%%%%%%%% MCMC parameters %%%%%%%%%%%%%%%%
% basic inference params 
mcmcInfo.n_mcmc_steps = 50; % number of MCMC steps (need to add convergence criteria)
mcmcInfo.n_chains = 100;

% employ parallel inference?
mcmcInfo.par_chain_flag = true;

% define parameters
mcmcInfo.R = [-.02, .04, 0; .02 -.05 .08; 0 .01 -.08];
mcmcInfo.tres = 20;
mcmcInfo.A = expm(mcmcInfo.R*mcmcInfo.tres);
mcmcInfo.nStates = size(mcmcInfo.A,1);
mcmcInfo.v = [.05,2,4]';
mcmcInfo.seq_length = 60*60/mcmcInfo.tres;

mcmcInfo.nSteps = 7;
[V, D] = eig(mcmcInfo.A);
[~, mi] = max(real(diag(D)));
mcmcInfo.pi0 = V(:,mi)/sum(V(:,mi));

mcmcInfo.sigma = .5;
mcmcInfo.alpha = 0;
mcmcInfo.n_traces = 10;
mcmcInfo.eps = 1e-2;



%%%%%%%%%%%%%%%% Generate helper arrays %%%%%%%%%%%%%%%%
mcmcInfo.coeff_MS2 = ms2_loading_coeff(mcmcInfo.alpha, mcmcInfo.nSteps)';
mcmcInfo.state_options = 1:mcmcInfo.nStates;
mcmcInfo.state_ref = repmat(reshape(mcmcInfo.state_options,1,1,[]),1,mcmcInfo.n_chains);

mcmcInfo.observed_fluo = NaN(mcmcInfo.seq_length,mcmcInfo.n_traces);
mcmcInfo.masterSimStruct = struct;
for n = 1:mcmcInfo.n_traces
    synthetic_data = synthetic_prob(mcmcInfo.seq_length, mcmcInfo.alpha, mcmcInfo.nStates, ...
                          mcmcInfo.nSteps, mcmcInfo.A, mcmcInfo.v', mcmcInfo.sigma, mcmcInfo.pi0);                                     
    
    mcmcInfo.observed_fluo(:,n) = synthetic_data.fluo_MS2;
    % record full simulation info
    fieldNames = fieldnames(synthetic_data);
    for f = 1:length(fieldNames)
        mcmcInfo.masterSimStruct(n).(fieldNames{f}) = synthetic_data.(fieldNames{f});
    end
end

%%% Nonsequential MCMC

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% initialize variables
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% initialize sigma as inverse gamma (see: http://ljwolf.org/teaching/gibbs.html)
fluo_vec = mcmcInfo.observed_fluo(:);
f_sigma = 0.05*mean(fluo_vec);
if ~mcmcInfo.par_chain_flag
    mcmcInfo.sigma_curr = trandn(-2,Inf)*f_sigma + 2*f_sigma;%sqrt(1./gamrnd(100*mcmcInfo.seq_length*mcmcInfo.n_traces/2,1./(fluo_vec'*fluo_vec)));
else
    mcmcInfo.sigma_curr = trandn(repmat(-2,n_chains,1),Inf(Inf,n_chains,1))*f_sigma + 2*f_sigma;
end
% initialize v
v2 = prctile(fluo_vec,95) / mcmcInfo.nSteps;%mean(fluo_vec)/sum(mcmcInfo.coeff_MS2)/(mcmcInfo.pi0_curr(2)+2*mcmcInfo.pi0_curr(3));
v2_err = std(fluo_vec) / mcmcInfo.nSteps;
mcmcInfo.v_curr = [0 ; v2 ; 2*v2]*1.3 + rand(3,1)*.2;

% A prior--assume strongly diagonal PDF given short timescale
% take A columns to follow multinomial Dirichlet distribution
mcmcInfo.A_alpha = ones(mcmcInfo.nStates);%*n_particles*n_traces;
mcmcInfo.A_alpha(eye(mcmcInfo.nStates)==1) = mcmcInfo.A_alpha(eye(mcmcInfo.nStates)==1)*10; % distribution hyper params
mcmcInfo.A_curr = sample_A_dirichlet(mcmcInfo.A_alpha, zeros(mcmcInfo.nStates));

% calculate pi0 
[V, D] = eig(mcmcInfo.A_curr);
[~, mi] = max(real(diag(D)));
mcmcInfo.pi0_curr = V(:,mi)/sum(V(:,mi));


% mcmcInfo.v_prop_sigma = .1*v2;

% initialize arrays to store inference results
mcmcInfo.logL_vec = NaN(mcmcInfo.n_mcmc_steps,1);
mcmcInfo.A_inf_array = NaN(mcmcInfo.nStates,mcmcInfo.nStates,mcmcInfo.n_mcmc_steps);
mcmcInfo.v_inf_array = NaN(mcmcInfo.n_mcmc_steps,mcmcInfo.nStates);
mcmcInfo.sigma_inf_array = NaN(mcmcInfo.n_mcmc_steps,1);

% initialize arrays to store inference diagnostics
mcmcInfo.v_acceptance_array = NaN(mcmcInfo.n_mcmc_steps,1);

% initialize chains
mcmcInfo = initialize_chains(mcmcInfo);

% get predicted fluorescence
mcmcInfo = predict_fluo_full(mcmcInfo);

wb = waitbar(0,'conducting MCMC inference...');
tic
for step = 1:mcmcInfo.n_mcmc_steps %mcmcInfo.n_mcmc_steps    
    waitbar(step/mcmcInfo.n_mcmc_steps,wb);    
    mcmcInfo.step = step;    
    % resample chains    
    mcmcInfo = resample_chains(mcmcInfo);              
    % get empirical transition and occupancy counts    
    mcmcInfo = get_empirical_counts(mcmcInfo);    
    % use Gibbs sampling to update hyperparameters    
    mcmcInfo = update_hmm_parameters_gibbs(mcmcInfo);
end
toc
disp('done')
delete(wb);